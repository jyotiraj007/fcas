#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

#set -e # This returns if any of the commands in the script return error code
#  precommitactions=`node -p "require('./package.json').preCommitActions"`
#  arrIN=(${precommitactions//,/ })

#  echo "precommitactions $precommitactions"
 
#  for i in "${arrIN[@]}"
#  do
   
#    echo "Running $i"
#    npm run $i
#    test_ec=$test_ec+$?
#    # or do whatever with individual element of the array
#  done
# #  npm run test
# #  test_ec=$?
# #  echo "test_ec $test_ec"
# #  npm run coverage
# #  coverage_ec=$?
# #  echo "coverage_ec $coverage_ec"

# #  npm run nsp
# #  nsp_ec=$?
# #  echo "nsp_ec $nsp_ec"

#  #let "ERR= $test_ec+$coverage_ec+$nsp_ec"
#  let "ERR= $test_ec"

#  echo "ERR $ERR"

# #testLog=$(npm run coverage)
# echo $testLog

# if [ "${ERR}" -ne 0 ]; then
#  echo "Coverage must be 100%!"
#  exit 1   # return 0 if want to commit else return non zero status
# fi
# # if [[ $testLog == *"errno 1"* ]]; then
# #   echo "Coverage not complete"
# #   exit -1 else
# #   exit 1
# # fi

preCommitOperations=`node -p "require('./package.json').preCommitActions"`
preCommitOperationsArray=(${preCommitOperations//,/ })
echo "preCommitOperationsArray ${preCommitOperationsArray[0]}"
echo "preCommitOperations $preCommitOperations"

for i in "${preCommitOperationsArray[@]}"
do
    echo "\033[33m Running $i \033[0m"
    # echo "Running $i"
    npm run $i
	commandStatusCode=$?
    echo "npm run $i status is $commandStatusCode"
	echo "if condition " [ $commandStatusCode -ne 0 ]
    if [ $commandStatusCode -ne 0 ]; then
		echo "\033[31m pre-commit result: $i failed \033[0m"
        exit 1   # exiting with non zero status prevents git to commit the changes
    fi
    
done
